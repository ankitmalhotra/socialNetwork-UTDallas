{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf510
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green116\blue0;\red92\green38\blue153;\red170\green13\blue145;
\red46\green13\blue110;\red28\green0\blue207;\red63\green110\blue116;\red196\green26\blue22;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab560
\pard\tx560\pardeftab560\pardirnatural

\f0\fs22 \cf2 \CocoaLigature0 /*Crypto Buffers*/\cf0 \
\cf3 size_t\cf0  cipherBufferSize;\
\cf3 uint8_t\cf0  *cipherBuffer;\
\cf3 size_t\cf0  plainBufferSize;\
\cf3 uint8_t\cf0  *plainBuffer;\
\
+(\cf4 void\cf0 )encryptMessage:(\cf3 NSString\cf0  *)message\
\{\
    \cf3 OSStatus\cf0  sanityCheck = \cf5 noErr\cf0 ;\
    \cf4 int\cf0  msgLength = [message \cf5 length\cf0 ];\
    \cf3 uint8_t\cf0  data[msgLength];\
    \cf4 for\cf0 (\cf4 int\cf0  i=\cf6 0\cf0 ;i<msgLength;i++)\
    \{\
        data[i]=[message \cf5 characterAtIndex\cf0 :i] ;\
    \}\
    \cf3 SecKeyRef\cf0  pubKey = \cf4 NULL\cf0 ;      \cf2 /*holds the pub key*/\cf0 \
    \cf7 createKeyPairs\cf0  *keyRefs;\
    \cf3 NSData\cf0  *pubTag=[NSData dataWithBytes:keyRefs.publicKeyIdentifier length:strlen((\cf4 const\cf0  \cf4 char\cf0  *)publicKeyIdentifier)];\
    \
    \cf3 NSMutableDictionary\cf0  *pubKeyDict = [[\cf3 NSMutableDictionary\cf0  \cf5 alloc\cf0 ]\cf5 init\cf0 ];\
    [pubKeyDict \cf5 setObject\cf0 :(\cf4 id\cf0 )\cf3 kSecClassKey\cf0  \cf5 forKey\cf0 :(\cf4 id\cf0 )\cf3 kSecClass\cf0 ];\
    [pubKeyDict \cf5 setObject\cf0 :pubTag \cf5 forKey\cf0 :(\cf4 id\cf0 )\cf3 kSecAttrApplicationTag\cf0 ];\
    [pubKeyDict \cf5 setObject\cf0 :(\cf4 id\cf0 )\cf3 kSecAttrKeyTypeRSA\cf0  \cf5 forKey\cf0 :(\cf4 id\cf0 )\cf3 kSecAttrKeyType\cf0 ];\
    [pubKeyDict \cf5 setObject\cf0 :[\cf3 NSNumber\cf0  \cf5 numberWithBool\cf0 :\cf4 YES\cf0 ] \cf5 forKey\cf0 :(\cf4 id\cf0 )\cf3 kSecReturnRef\cf0 ];\
    \
    \cf2 /*copy the key from keychain to pubkey*/\cf0 \
    sanityCheck =\
    \cf5 SecItemCopyMatching\cf0 ((\cf3 CFDictionaryRef\cf0 )pubKeyDict,(\cf3 CFTypeRef\cf0  *)&pubKey);\
    \
    \cf2 /*Allocate crypto buffer*/\cf0 \
    \cf7 cipherBufferSize\cf0 =\cf5 SecKeyGetBlockSize\cf0 (pubKey);\
    \cf7 cipherBuffer\cf0 =\cf5 malloc\cf0 (\cf7 cipherBufferSize\cf0 );\
    \cf2 /*Start Encrypting*/\cf0 \
    sanityCheck=\
    \cf5 SecKeyEncrypt\cf0 (pubKey, \cf5 kSecPaddingPKCS1\cf0 , data, \cf4 sizeof\cf0 (data), \cf7 cipherBuffer\cf0 , &\cf7 cipherBufferSize\cf0 );\
    \cf5 NSLog\cf0 (\cf8 @"Encrypted text: %s"\cf0 ,\cf7 cipherBuffer\cf0 );\
    \
    \cf4 if\cf0 (pubKey) \cf5 CFRelease\cf0 (pubKey);\
    \cf4 if\cf0 (pubKeyDict) \cf5 CFRelease\cf0 (pubKeyDict);\
    \cf2 //free(cipherBuffer);          /*transmit over network first & then free*/\cf0 \
\}\
}